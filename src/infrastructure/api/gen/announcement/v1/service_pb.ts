// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file announcement/v1/service.proto (package announcement.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Announcement } from "./type_pb.js";
import { UUID } from "../../shared/type_pb.js";

/**
 * @generated from message announcement.v1.GetAnnouncementsRequest
 */
export class GetAnnouncementsRequest extends Message<GetAnnouncementsRequest> {
  constructor(data?: PartialMessage<GetAnnouncementsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "announcement.v1.GetAnnouncementsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAnnouncementsRequest {
    return new GetAnnouncementsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAnnouncementsRequest {
    return new GetAnnouncementsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAnnouncementsRequest {
    return new GetAnnouncementsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAnnouncementsRequest | PlainMessage<GetAnnouncementsRequest> | undefined, b: GetAnnouncementsRequest | PlainMessage<GetAnnouncementsRequest> | undefined): boolean {
    return proto3.util.equals(GetAnnouncementsRequest, a, b);
  }
}

/**
 * @generated from message announcement.v1.GetAnnouncementsResponse
 */
export class GetAnnouncementsResponse extends Message<GetAnnouncementsResponse> {
  /**
   * @generated from field: repeated announcement.v1.Announcement announcements = 1;
   */
  announcements: Announcement[] = [];

  constructor(data?: PartialMessage<GetAnnouncementsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "announcement.v1.GetAnnouncementsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "announcements", kind: "message", T: Announcement, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAnnouncementsResponse {
    return new GetAnnouncementsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAnnouncementsResponse {
    return new GetAnnouncementsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAnnouncementsResponse {
    return new GetAnnouncementsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAnnouncementsResponse | PlainMessage<GetAnnouncementsResponse> | undefined, b: GetAnnouncementsResponse | PlainMessage<GetAnnouncementsResponse> | undefined): boolean {
    return proto3.util.equals(GetAnnouncementsResponse, a, b);
  }
}

/**
 * @generated from message announcement.v1.GetReadFlagsRequest
 */
export class GetReadFlagsRequest extends Message<GetReadFlagsRequest> {
  /**
   * @generated from field: repeated shared.UUID ids = 1;
   */
  ids: UUID[] = [];

  constructor(data?: PartialMessage<GetReadFlagsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "announcement.v1.GetReadFlagsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ids", kind: "message", T: UUID, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetReadFlagsRequest {
    return new GetReadFlagsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetReadFlagsRequest {
    return new GetReadFlagsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetReadFlagsRequest {
    return new GetReadFlagsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetReadFlagsRequest | PlainMessage<GetReadFlagsRequest> | undefined, b: GetReadFlagsRequest | PlainMessage<GetReadFlagsRequest> | undefined): boolean {
    return proto3.util.equals(GetReadFlagsRequest, a, b);
  }
}

/**
 * @generated from message announcement.v1.GetReadFlagsResponse
 */
export class GetReadFlagsResponse extends Message<GetReadFlagsResponse> {
  /**
   * @generated from field: repeated bool read_flags = 1;
   */
  readFlags: boolean[] = [];

  constructor(data?: PartialMessage<GetReadFlagsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "announcement.v1.GetReadFlagsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "read_flags", kind: "scalar", T: 8 /* ScalarType.BOOL */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetReadFlagsResponse {
    return new GetReadFlagsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetReadFlagsResponse {
    return new GetReadFlagsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetReadFlagsResponse {
    return new GetReadFlagsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetReadFlagsResponse | PlainMessage<GetReadFlagsResponse> | undefined, b: GetReadFlagsResponse | PlainMessage<GetReadFlagsResponse> | undefined): boolean {
    return proto3.util.equals(GetReadFlagsResponse, a, b);
  }
}

/**
 * @generated from message announcement.v1.UpdateReadFlagRequest
 */
export class UpdateReadFlagRequest extends Message<UpdateReadFlagRequest> {
  /**
   * @generated from field: shared.UUID id = 1;
   */
  id?: UUID;

  /**
   * @generated from field: bool read_flag = 2;
   */
  readFlag = false;

  constructor(data?: PartialMessage<UpdateReadFlagRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "announcement.v1.UpdateReadFlagRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: UUID },
    { no: 2, name: "read_flag", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateReadFlagRequest {
    return new UpdateReadFlagRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateReadFlagRequest {
    return new UpdateReadFlagRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateReadFlagRequest {
    return new UpdateReadFlagRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateReadFlagRequest | PlainMessage<UpdateReadFlagRequest> | undefined, b: UpdateReadFlagRequest | PlainMessage<UpdateReadFlagRequest> | undefined): boolean {
    return proto3.util.equals(UpdateReadFlagRequest, a, b);
  }
}

/**
 * @generated from message announcement.v1.UpdateReadFlagResponse
 */
export class UpdateReadFlagResponse extends Message<UpdateReadFlagResponse> {
  constructor(data?: PartialMessage<UpdateReadFlagResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "announcement.v1.UpdateReadFlagResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateReadFlagResponse {
    return new UpdateReadFlagResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateReadFlagResponse {
    return new UpdateReadFlagResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateReadFlagResponse {
    return new UpdateReadFlagResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateReadFlagResponse | PlainMessage<UpdateReadFlagResponse> | undefined, b: UpdateReadFlagResponse | PlainMessage<UpdateReadFlagResponse> | undefined): boolean {
    return proto3.util.equals(UpdateReadFlagResponse, a, b);
  }
}

