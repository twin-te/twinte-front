// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file unified/v1/service.proto (package unified.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { RFC3339FullDate } from "../../shared/type_pb.js";
import { Event, Module } from "../../schoolcalendar/v1/type_pb.js";
import { RegisteredCourse } from "../../timetable/v1/type_pb.js";

/**
 * @generated from message unified.v1.GetByDateRequest
 */
export class GetByDateRequest extends Message<GetByDateRequest> {
  /**
   * @generated from field: shared.RFC3339FullDate date = 1;
   */
  date?: RFC3339FullDate;

  constructor(data?: PartialMessage<GetByDateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "unified.v1.GetByDateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date", kind: "message", T: RFC3339FullDate },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetByDateRequest {
    return new GetByDateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetByDateRequest {
    return new GetByDateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetByDateRequest {
    return new GetByDateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetByDateRequest | PlainMessage<GetByDateRequest> | undefined, b: GetByDateRequest | PlainMessage<GetByDateRequest> | undefined): boolean {
    return proto3.util.equals(GetByDateRequest, a, b);
  }
}

/**
 * @generated from message unified.v1.GetByDateResponse
 */
export class GetByDateResponse extends Message<GetByDateResponse> {
  /**
   * @generated from field: repeated schoolcalendar.v1.Event events = 1;
   */
  events: Event[] = [];

  /**
   * @generated from field: optional schoolcalendar.v1.Module module = 2;
   */
  module?: Module;

  /**
   * @generated from field: repeated timetable.v1.RegisteredCourse registered_courses = 3;
   */
  registeredCourses: RegisteredCourse[] = [];

  constructor(data?: PartialMessage<GetByDateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "unified.v1.GetByDateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "events", kind: "message", T: Event, repeated: true },
    { no: 2, name: "module", kind: "enum", T: proto3.getEnumType(Module), opt: true },
    { no: 3, name: "registered_courses", kind: "message", T: RegisteredCourse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetByDateResponse {
    return new GetByDateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetByDateResponse {
    return new GetByDateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetByDateResponse {
    return new GetByDateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetByDateResponse | PlainMessage<GetByDateResponse> | undefined, b: GetByDateResponse | PlainMessage<GetByDateResponse> | undefined): boolean {
    return proto3.util.equals(GetByDateResponse, a, b);
  }
}

