// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file schoolcalendar/v1/service.proto (package schoolcalendar.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { AcademicYear, RFC3339FullDate } from "../../shared/type_pb.js";
import { Event, Module, ModuleDetail } from "./type_pb.js";

/**
 * @generated from message schoolcalendar.v1.GetEventsRequest
 */
export class GetEventsRequest extends Message<GetEventsRequest> {
  /**
   * @generated from field: shared.AcademicYear year = 1;
   */
  year?: AcademicYear;

  constructor(data?: PartialMessage<GetEventsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "schoolcalendar.v1.GetEventsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "year", kind: "message", T: AcademicYear },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEventsRequest {
    return new GetEventsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEventsRequest {
    return new GetEventsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEventsRequest {
    return new GetEventsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetEventsRequest | PlainMessage<GetEventsRequest> | undefined, b: GetEventsRequest | PlainMessage<GetEventsRequest> | undefined): boolean {
    return proto3.util.equals(GetEventsRequest, a, b);
  }
}

/**
 * @generated from message schoolcalendar.v1.GetEventsResponse
 */
export class GetEventsResponse extends Message<GetEventsResponse> {
  /**
   * @generated from field: repeated schoolcalendar.v1.Event events = 1;
   */
  events: Event[] = [];

  constructor(data?: PartialMessage<GetEventsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "schoolcalendar.v1.GetEventsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "events", kind: "message", T: Event, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEventsResponse {
    return new GetEventsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEventsResponse {
    return new GetEventsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEventsResponse {
    return new GetEventsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetEventsResponse | PlainMessage<GetEventsResponse> | undefined, b: GetEventsResponse | PlainMessage<GetEventsResponse> | undefined): boolean {
    return proto3.util.equals(GetEventsResponse, a, b);
  }
}

/**
 * @generated from message schoolcalendar.v1.GetEventsByDateRequest
 */
export class GetEventsByDateRequest extends Message<GetEventsByDateRequest> {
  /**
   * @generated from field: shared.RFC3339FullDate date = 1;
   */
  date?: RFC3339FullDate;

  constructor(data?: PartialMessage<GetEventsByDateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "schoolcalendar.v1.GetEventsByDateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date", kind: "message", T: RFC3339FullDate },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEventsByDateRequest {
    return new GetEventsByDateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEventsByDateRequest {
    return new GetEventsByDateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEventsByDateRequest {
    return new GetEventsByDateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetEventsByDateRequest | PlainMessage<GetEventsByDateRequest> | undefined, b: GetEventsByDateRequest | PlainMessage<GetEventsByDateRequest> | undefined): boolean {
    return proto3.util.equals(GetEventsByDateRequest, a, b);
  }
}

/**
 * @generated from message schoolcalendar.v1.GetEventsByDateResponse
 */
export class GetEventsByDateResponse extends Message<GetEventsByDateResponse> {
  /**
   * @generated from field: repeated schoolcalendar.v1.Event events = 1;
   */
  events: Event[] = [];

  constructor(data?: PartialMessage<GetEventsByDateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "schoolcalendar.v1.GetEventsByDateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "events", kind: "message", T: Event, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEventsByDateResponse {
    return new GetEventsByDateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEventsByDateResponse {
    return new GetEventsByDateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEventsByDateResponse {
    return new GetEventsByDateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetEventsByDateResponse | PlainMessage<GetEventsByDateResponse> | undefined, b: GetEventsByDateResponse | PlainMessage<GetEventsByDateResponse> | undefined): boolean {
    return proto3.util.equals(GetEventsByDateResponse, a, b);
  }
}

/**
 * @generated from message schoolcalendar.v1.GetModuleDetailsRequest
 */
export class GetModuleDetailsRequest extends Message<GetModuleDetailsRequest> {
  /**
   * @generated from field: shared.AcademicYear year = 1;
   */
  year?: AcademicYear;

  constructor(data?: PartialMessage<GetModuleDetailsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "schoolcalendar.v1.GetModuleDetailsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "year", kind: "message", T: AcademicYear },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetModuleDetailsRequest {
    return new GetModuleDetailsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetModuleDetailsRequest {
    return new GetModuleDetailsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetModuleDetailsRequest {
    return new GetModuleDetailsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetModuleDetailsRequest | PlainMessage<GetModuleDetailsRequest> | undefined, b: GetModuleDetailsRequest | PlainMessage<GetModuleDetailsRequest> | undefined): boolean {
    return proto3.util.equals(GetModuleDetailsRequest, a, b);
  }
}

/**
 * @generated from message schoolcalendar.v1.GetModuleDetailsResponse
 */
export class GetModuleDetailsResponse extends Message<GetModuleDetailsResponse> {
  /**
   * @generated from field: repeated schoolcalendar.v1.ModuleDetail module_details = 1;
   */
  moduleDetails: ModuleDetail[] = [];

  constructor(data?: PartialMessage<GetModuleDetailsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "schoolcalendar.v1.GetModuleDetailsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module_details", kind: "message", T: ModuleDetail, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetModuleDetailsResponse {
    return new GetModuleDetailsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetModuleDetailsResponse {
    return new GetModuleDetailsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetModuleDetailsResponse {
    return new GetModuleDetailsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetModuleDetailsResponse | PlainMessage<GetModuleDetailsResponse> | undefined, b: GetModuleDetailsResponse | PlainMessage<GetModuleDetailsResponse> | undefined): boolean {
    return proto3.util.equals(GetModuleDetailsResponse, a, b);
  }
}

/**
 * @generated from message schoolcalendar.v1.GetModuleByDateRequest
 */
export class GetModuleByDateRequest extends Message<GetModuleByDateRequest> {
  /**
   * @generated from field: shared.RFC3339FullDate date = 1;
   */
  date?: RFC3339FullDate;

  constructor(data?: PartialMessage<GetModuleByDateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "schoolcalendar.v1.GetModuleByDateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date", kind: "message", T: RFC3339FullDate },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetModuleByDateRequest {
    return new GetModuleByDateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetModuleByDateRequest {
    return new GetModuleByDateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetModuleByDateRequest {
    return new GetModuleByDateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetModuleByDateRequest | PlainMessage<GetModuleByDateRequest> | undefined, b: GetModuleByDateRequest | PlainMessage<GetModuleByDateRequest> | undefined): boolean {
    return proto3.util.equals(GetModuleByDateRequest, a, b);
  }
}

/**
 * @generated from message schoolcalendar.v1.GetModuleByDateResponse
 */
export class GetModuleByDateResponse extends Message<GetModuleByDateResponse> {
  /**
   * @generated from field: schoolcalendar.v1.Module module = 1;
   */
  module = Module.UNSPECIFIED;

  constructor(data?: PartialMessage<GetModuleByDateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "schoolcalendar.v1.GetModuleByDateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "module", kind: "enum", T: proto3.getEnumType(Module) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetModuleByDateResponse {
    return new GetModuleByDateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetModuleByDateResponse {
    return new GetModuleByDateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetModuleByDateResponse {
    return new GetModuleByDateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetModuleByDateResponse | PlainMessage<GetModuleByDateResponse> | undefined, b: GetModuleByDateResponse | PlainMessage<GetModuleByDateResponse> | undefined): boolean {
    return proto3.util.equals(GetModuleByDateResponse, a, b);
  }
}

